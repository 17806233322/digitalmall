<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd 
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop.xsd 
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx.xsd"
	default-autowire="byName">

	<!-- IOC控制反转（Inversion of Control，英文缩写为IoC） -->
	<!-- 把创建对象的权利交给框架,是框架的重要特征， -->
	<!-- 并非面向对象编程的专用术语。 -->
	<!-- 它包括依赖注入（Dependency Injection，简称DI） -->
	<!-- 和依赖查找（Dependency Lookup）。 -->

	<!-- Spring 框架的 AOP（Aspect Oriented Programming） -->
	<!-- Spring 框架的一个关键组件是面向切面的编程(AOP)框架。 -->
	<!-- 面向切面的编程需要把程序逻辑分解成不同的部分称为所谓的关注点。 -->
	<!-- 跨一个应用程序的多个点的功能被称为横切关注点， -->
	<!-- 这些横切关注点在概念上独立于应用程序的业务逻辑。 -->
	<!-- 有各种各样的常见的很好的方面的例子， -->
	<!-- 如日志记录、审计、声明式事务、安全性和缓存等。 -->

	<!-- OOA(Object-Oriented Analysis)面向对象分析 -->
	<!-- OOD(Object-Oriented Design)面向对象设计 -->
	<!-- OOP(Object Oriented Programming)面向对象编程 -->
	<!-- OOP基本原则：程序是由单个能够起到子程序作用的单元或对象组合而成 -->
	<!-- 在OOP中，关键单元模块度是类，而在 AOP中单元模块度是方面。 -->

	<!-- Spring AOP 模块提供拦截器来拦截一个应用程序， -->
	<!-- 例如，当执行一个方法时，你可以在方法执行之前或之后添加额外的功能。 -->

	<bean id="dao1" class="com.situ.j1803.j0511.dao.Dao1" />
	<bean id="dao2" class="com.situ.j1803.j0511.dao.Dao2" />
	<bean id="service1" class="com.situ.j1803.j0511.service.Service1" />

	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource2" />
	</bean>
	<tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
<!-- 			<tx:method name="*" propagation="REQUIRED" /> -->
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<!-- name是与事务属性关联的方法名。 -->
			<!-- 通配符（*）可以用来指定一批关联到相同的事务属性的方法。 -->
			<!-- 如：'get*'、'handle*'、'on*Event'等等。 -->
			<!-- *是对所有方法都加 -->

			<!-- PROPAGATION_REQUIRED： -->
			<!-- 支持当前事务，若当前没有事务，就新建一个事务。这是最常见的选择。 -->
			<!-- PROPAGATION_SUPPORTS： -->
			<!-- 支持当前事务，若当前没有事务，就以非事务方式执行。 -->
			<!-- PROPAGATION_MANDATORY： -->
			<!-- 支持当前事务，若当前没有事务，就抛出异常。 -->
			<!-- PROPAGATION_REQUIRES_NEW： -->
			<!-- 新建事务，若当前存在事务，把当前事务挂起。 -->
			<!-- PROPAGATION_NOT_SUPPORTED： -->
			<!-- 以非事务方式执行操作，若当前存在事务，就把当前事务挂起。 -->
			<!-- PROPAGATION_NEVER： -->
			<!-- 以非事务方式执行，若当前存在事务，则抛出异常。 -->
			<!-- PROPAGATION_NESTED： -->
			<!-- 支持当前事务，若当前事务存在，则执行一个嵌套事务，若当前没有事务，就新建一个事务。 -->

		</tx:attributes>
	</tx:advice>
	<!-- 用切点把事务切进去 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.situ.j1803.j0511.service.*.*(..))"
			id="pointcut" />
		<!-- 任意公共方法的执行： -->
		<!-- execution(public * *(..)) -->
		<!-- 任何一个以“set”开始的方法的执行： -->
		<!-- execution(* set*(..)) -->
		<!-- Service1 中的任意方法的执行： -->
		<!-- execution(* com.situ.j1803.j0511.service.Service1.*(..)) -->
		<!-- 定义在service包里的任意方法的执行： -->
		<!-- execution(* com.situ.j1803.j0511.service.*.*(..)) -->
		<!-- 定义在service包或者子包里的任意方法的执行： -->
		<!-- execution(* com.situ.j1803.j0511.service..*.*(..)) -->
		<aop:advisor advice-ref="advice" pointcut-ref="pointcut" />
	</aop:config>
</beans>